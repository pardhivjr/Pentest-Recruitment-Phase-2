#basic coding task involving python.
from pwn import *
import codecs
io = process('./script')
context.log_level = 'DEBUG'
def decode_decimal(encoded_str_to_decode):
    return ''.join(chr(int(x)) for x in encoded_str_to_decode.split())
def decode_rot13(encoded_str_to_decode):
    return codecs.decode(encoded_str_to_decode, 'rot_13')
def decode_base64(encoded_str_to_decode):
    return base64.b64decode(encoded_str_to_decode).decode('utf-8')
def decode_octal(encoded_str_to_decode):
    return ''.join(chr(int(x, 8)) for x in encoded_str_to_decode.split())
def decode_hex(encoded_str_to_decode):
    hex_values = encoded_str_to_decode.replace("0x", "")
    
    try:
        return bytes.fromhex(hex_values.replace(" ","")).decode('utf-8')
    except ValueError:
        print(f"Error decoding hex string: {encoded_str_to_decode}")
        return "Invalid Hex String"
def caeser_decipher(a):
    values=a.split(" ")
    caeser=values[0]
    key=int(values[-1])
    shift = key % 26  # Ensure the shift is within the alphabet
    result = "a"
    result = ""

    for char in caeser:
        if char.isalpha():
            base_ord = ord('a') if char.islower() else ord('A')
            result += chr((ord(char) - base_ord - key) % 26 + base_ord)
        else:
            result += char

    return result
def decode_atex(a):
    dictionary_mapping = { 'A': "@!@@!", 'B': "@!@@@", 'C': "@@!!!", 'D': "@@!!@", 'E': "!!!!!", 'F': "!!!!@", 'G': "!!!@!", 'H': "!!!@@", 'I': "!!@!!", 'J': "!!@!@", 'K': "!!@@!", 'L': "!!@@@", 'M': "!@!!!", 'N': "!@!!@", 'O': "!@!@!", 'P': "!@!@@", 'Q': "!@@!!", 'R': "!@@!@", 'S': "!@@@!", 'T': "!@@@@", 'U': "@!!!!", 'V': "@!!!@", 'W': "@!!@!", 'X': "@!!@@", 'Y': "@!@!!", 'Z': "@!@!@", }
    
    values2chk=a.split()
    result=""

    for i in values2chk:
        for key, value in dictionary_mapping.items():
                if value == i:
                    result+=key
    return result  
    
while True:
    prompt = io.recvuntil([b"encoded string:", b"caeser", b"custom",b"Decrypt this:"]) 

    if not prompt:
        break

    encoded_str_to_decode = io.recvline().decode().strip()
    print(len(encoded_str_to_decode))
    
   

    if b"decimal" in prompt:
        decoded_str = decode_decimal(encoded_str_to_decode)
    elif b"rot" in prompt:
        decoded_str = decode_rot13(encoded_str_to_decode)
    elif b"base64" in prompt:
        decoded_str = decode_base64(encoded_str_to_decode)
    elif b"octal" in prompt:
        decoded_str = decode_octal(encoded_str_to_decode)
    elif b"hex" in prompt:
        decoded_str = decode_hex(encoded_str_to_decode)
    elif b"caeser" in prompt:
        decoded_str = caeser_decipher(encoded_str_to_decode)
    
        
    elif b"Decrypt this:" in prompt:
        decoded_str= decode_atex(encoded_str_to_decode)
    
    else:
        decoded_str = "U"
    print(f"Decoded String: {decoded_str}")
    io.sendline(decoded_str)
    
io.interactive()

io.close()
